{"version":3,"file":"regex.bf023230.js","sources":["../../hoppscotch-common/src/workers/regex.js"],"sourcesContent":["function generateREForProtocol(protocol) {\n  return [\n    new RegExp(\n      `${protocol}(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`\n    ),\n    new RegExp(\n      `${protocol}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9/])$`\n    ),\n  ]\n}\n\nconst ws = generateREForProtocol(\"^(wss?:\\\\/\\\\/)?\")\nconst sse = generateREForProtocol(\"^(https?:\\\\/\\\\/)?\")\nconst socketio = generateREForProtocol(\"^((wss?:\\\\/\\\\/)|(https?:\\\\/\\\\/))?\")\nconst regex = { ws, sse, socketio }\n\n// type = ws/sse/socketio\nasync function validator(type, url) {\n  console.time(`validator ${url}`)\n  const [res1, res2] = await Promise.all([\n    regex[type][0].test(url),\n    regex[type][1].test(url),\n  ])\n  console.timeEnd(`validator ${url}`)\n  return res1 || res2\n}\n\nonmessage = async ({ data }) => {\n  const { type, url } = data\n  const result = await validator(type, url)\n  postMessage({ type, url, result })\n}\n"],"names":["generateREForProtocol","protocol","ws","sse","socketio","regex","validator","type","url","res1","res2","data","result"],"mappings":"yBAAA,SAASA,EAAsBC,EAAU,CACvC,MAAO,CACL,IAAI,OACF,GAAGA,0GACJ,EACD,IAAI,OACF,GAAGA,2GACJ,CACF,CACH,CAEA,MAAMC,EAAKF,EAAsB,iBAAiB,EAC5CG,EAAMH,EAAsB,mBAAmB,EAC/CI,EAAWJ,EAAsB,mCAAmC,EACpEK,EAAQ,CAAE,GAAAH,EAAI,IAAAC,EAAK,SAAAC,CAAU,EAGnC,eAAeE,EAAUC,EAAMC,EAAK,CAClC,QAAQ,KAAK,aAAaA,GAAK,EAC/B,KAAM,CAACC,EAAMC,CAAI,EAAI,MAAM,QAAQ,IAAI,CACrCL,EAAME,GAAM,GAAG,KAAKC,CAAG,EACvBH,EAAME,GAAM,GAAG,KAAKC,CAAG,CAC3B,CAAG,EACD,eAAQ,QAAQ,aAAaA,GAAK,EAC3BC,GAAQC,CACjB,CAEA,UAAY,MAAO,CAAE,KAAAC,KAAW,CAC9B,KAAM,CAAE,KAAAJ,EAAM,IAAAC,CAAG,EAAKG,EAChBC,EAAS,MAAMN,EAAUC,EAAMC,CAAG,EACxC,YAAY,CAAE,KAAAD,EAAM,IAAAC,EAAK,OAAAI,CAAM,CAAE,CACnC"}