{"version":3,"file":"lens-actions.d9daeb6a.js","sources":["../../../hoppscotch-common/src/composables/lens-actions.ts"],"sourcesContent":["import { computed, ComputedRef, ref, Ref } from \"vue\"\nimport IconDownload from \"~icons/lucide/download\"\nimport IconCopy from \"~icons/lucide/copy\"\nimport IconCheck from \"~icons/lucide/check\"\nimport { pipe } from \"fp-ts/function\"\nimport * as S from \"fp-ts/string\"\nimport * as RNEA from \"fp-ts/ReadonlyNonEmptyArray\"\nimport { useToast } from \"./toast\"\nimport { useI18n } from \"./i18n\"\nimport { refAutoReset } from \"@vueuse/core\"\nimport { copyToClipboard } from \"@helpers/utils/clipboard\"\nimport { HoppRESTResponse } from \"@helpers/types/HoppRESTResponse\"\n\nexport function useCopyResponse(responseBodyText: Ref<any>) {\n  const toast = useToast()\n  const t = useI18n()\n\n  const copyIcon = refAutoReset(IconCopy, 1000)\n\n  const copyResponse = () => {\n    copyToClipboard(responseBodyText.value)\n    copyIcon.value = IconCheck\n    toast.success(`${t(\"state.copied_to_clipboard\")}`)\n  }\n\n  return {\n    copyIcon,\n    copyResponse,\n  }\n}\n\nexport type downloadResponseReturnType = (() => void) | Ref<any>\n\nexport function useDownloadResponse(\n  contentType: string,\n  responseBody: Ref<string | ArrayBuffer>\n) {\n  const downloadIcon = refAutoReset(IconDownload, 1000)\n\n  const toast = useToast()\n  const t = useI18n()\n\n  const downloadResponse = () => {\n    const dataToWrite = responseBody.value\n    const file = new Blob([dataToWrite], { type: contentType })\n    const a = document.createElement(\"a\")\n    const url = URL.createObjectURL(file)\n    a.href = url\n\n    // TODO: get uri from meta\n    a.download = pipe(\n      url,\n      S.split(\"/\"),\n      RNEA.last,\n      S.split(\"#\"),\n      RNEA.head,\n      S.split(\"?\"),\n      RNEA.head\n    )\n\n    document.body.appendChild(a)\n    a.click()\n    downloadIcon.value = IconCheck\n    toast.success(`${t(\"state.download_started\")}`)\n    setTimeout(() => {\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n    }, 1000)\n  }\n  return {\n    downloadIcon,\n    downloadResponse,\n  }\n}\n\nexport function usePreview(\n  previewEnabledDefault: boolean,\n  responseBodyText: Ref<string>\n): {\n  previewFrame: any\n  previewEnabled: Ref<boolean>\n  togglePreview: () => void\n} {\n  const previewFrame = ref<any | null>(null)\n  const previewEnabled = ref(previewEnabledDefault)\n  const url = ref(\"\")\n\n  const togglePreview = () => {\n    previewEnabled.value = !previewEnabled.value\n    if (previewEnabled.value) {\n      if (previewFrame.value.getAttribute(\"data-previewing-url\") === url.value)\n        return\n      // Use DOMParser to parse document HTML.\n      const previewDocument = new DOMParser().parseFromString(\n        responseBodyText.value,\n        \"text/html\"\n      )\n      // Inject <base href=\"...\"> tag to head, to fix relative CSS/HTML paths.\n      previewDocument.head.innerHTML =\n        `<base href=\"${url.value}\">` + previewDocument.head.innerHTML\n      // Finally, set the iframe source to the resulting HTML.\n      previewFrame.value.srcdoc = previewDocument.documentElement.outerHTML\n      previewFrame.value.setAttribute(\"data-previewing-url\", url.value)\n    }\n  }\n\n  return {\n    previewFrame,\n    previewEnabled,\n    togglePreview,\n  }\n}\n\nexport function useResponseBody(response: HoppRESTResponse): {\n  responseBodyText: ComputedRef<string>\n} {\n  const responseBodyText = computed(() => {\n    if (\n      response.type === \"loading\" ||\n      response.type === \"network_fail\" ||\n      response.type === \"script_fail\" ||\n      response.type === \"fail\"\n    )\n      return \"\"\n    if (typeof response.body === \"string\") return response.body\n    else {\n      const res = new TextDecoder(\"utf-8\").decode(response.body)\n      // HACK: Temporary trailing null character issue from the extension fix\n      return res.replace(/\\0+$/, \"\")\n    }\n  })\n  return {\n    responseBodyText,\n  }\n}\n"],"names":["useCopyResponse","responseBodyText","toast","useToast","useI18n","copyIcon","refAutoReset","IconCopy","copyToClipboard","IconCheck","useDownloadResponse","contentType","responseBody","downloadIcon","IconDownload","t","dataToWrite","file","a","url","pipe","S.split","RNEA.last","RNEA.head","usePreview","previewEnabledDefault","previewFrame","ref","previewEnabled","previewDocument","useResponseBody","response","computed"],"mappings":"ygBAaO,SAASA,EAAgBC,EAA4B,CAC1D,MAAMC,EAAQC,IACR,EAAIC,IAEJC,EAAWC,EAAaC,EAAU,GAAI,EAQrC,MAAA,CACL,SAAAF,EACA,aARmB,IAAM,CACzBG,EAAgBP,EAAiB,KAAK,EACtCI,EAAS,MAAQI,EACjBP,EAAM,QAAQ,GAAG,EAAE,2BAA2B,GAAG,CAAA,CAKjD,CAEJ,CAIgB,SAAAQ,EACdC,EACAC,EACA,CACM,MAAAC,EAAeP,EAAaQ,EAAc,GAAI,EAE9CZ,EAAQC,IACRY,EAAIX,IA6BH,MAAA,CACL,aAAAS,EACA,iBA7BuB,IAAM,CAC7B,MAAMG,EAAcJ,EAAa,MAC3BK,EAAO,IAAI,KAAK,CAACD,CAAW,EAAG,CAAE,KAAML,CAAA,CAAa,EACpDO,EAAI,SAAS,cAAc,GAAG,EAC9BC,EAAM,IAAI,gBAAgBF,CAAI,EACpCC,EAAE,KAAOC,EAGTD,EAAE,SAAWE,EACXD,EACAE,EAAQ,GAAG,EACXC,EACAD,EAAQ,GAAG,EACXE,EACAF,EAAQ,GAAG,EACXE,CAAK,EAGE,SAAA,KAAK,YAAYL,CAAC,EAC3BA,EAAE,MAAM,EACRL,EAAa,MAAQJ,EACrBP,EAAM,QAAQ,GAAGa,EAAE,wBAAwB,GAAG,EAC9C,WAAW,IAAM,CACN,SAAA,KAAK,YAAYG,CAAC,EAC3B,IAAI,gBAAgBC,CAAG,GACtB,GAAI,CAAA,CAIP,CAEJ,CAEgB,SAAAK,EACdC,EACAxB,EAKA,CACM,MAAAyB,EAAeC,EAAgB,IAAI,EACnCC,EAAiBD,EAAIF,CAAqB,EAC1CN,EAAMQ,EAAI,EAAE,EAqBX,MAAA,CACL,aAAAD,EACA,eAAAE,EACA,cAtBoB,IAAM,CAE1B,GADeA,EAAA,MAAQ,CAACA,EAAe,MACnCA,EAAe,MAAO,CACxB,GAAIF,EAAa,MAAM,aAAa,qBAAqB,IAAMP,EAAI,MACjE,OAEI,MAAAU,EAAkB,IAAI,UAAA,EAAY,gBACtC5B,EAAiB,MACjB,WAAA,EAGF4B,EAAgB,KAAK,UACnB,eAAeV,EAAI,UAAYU,EAAgB,KAAK,UAEzCH,EAAA,MAAM,OAASG,EAAgB,gBAAgB,UAC5DH,EAAa,MAAM,aAAa,sBAAuBP,EAAI,KAAK,CAClE,CAAA,CAMA,CAEJ,CAEO,SAASW,EAAgBC,EAE9B,CAgBO,MAAA,CACL,iBAhBuBC,EAAS,IAE9BD,EAAS,OAAS,WAClBA,EAAS,OAAS,gBAClBA,EAAS,OAAS,eAClBA,EAAS,OAAS,OAEX,GACL,OAAOA,EAAS,MAAS,SAAiBA,EAAS,KAEzC,IAAI,YAAY,OAAO,EAAE,OAAOA,EAAS,IAAI,EAE9C,QAAQ,OAAQ,EAAE,CAEhC,CAEC,CAEJ"}