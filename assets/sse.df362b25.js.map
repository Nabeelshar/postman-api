{"version":3,"file":"sse.df362b25.js","sources":["../../../hoppscotch-common/src/pages/realtime/sse.vue"],"sourcesContent":["<template>\n  <AppPaneLayout layout-id=\"sse\">\n    <template #primary>\n      <div\n        class=\"sticky top-0 z-10 flex flex-shrink-0 p-4 overflow-x-auto space-x-2 bg-primary\"\n      >\n        <div class=\"inline-flex flex-1 space-x-2\">\n          <div class=\"flex flex-1\">\n            <input\n              id=\"server\"\n              v-model=\"server\"\n              type=\"url\"\n              autocomplete=\"off\"\n              :class=\"{ error: !isUrlValid }\"\n              class=\"flex flex-1 w-full px-4 py-2 border rounded-l bg-primaryLight border-divider text-secondaryDark\"\n              :placeholder=\"t('sse.url')\"\n              :disabled=\"\n                connectionState === 'STARTED' || connectionState === 'STARTING'\n              \"\n              @keyup.enter=\"isUrlValid ? toggleSSEConnection() : null\"\n            />\n            <label\n              for=\"event-type\"\n              class=\"px-4 py-2 font-semibold truncate border-t border-b bg-primaryLight border-divider text-secondaryLight\"\n            >\n              {{ t(\"sse.event_type\") }}\n            </label>\n            <input\n              id=\"event-type\"\n              v-model=\"eventType\"\n              class=\"flex flex-1 w-full px-4 py-2 border rounded-r bg-primaryLight border-divider text-secondaryDark\"\n              spellcheck=\"false\"\n              :disabled=\"\n                connectionState === 'STARTED' || connectionState === 'STARTING'\n              \"\n              @keyup.enter=\"isUrlValid ? toggleSSEConnection() : null\"\n            />\n          </div>\n          <ButtonPrimary\n            id=\"start\"\n            :disabled=\"!isUrlValid\"\n            name=\"start\"\n            class=\"w-32\"\n            :label=\"\n              connectionState === 'STARTING'\n                ? t('action.starting')\n                : connectionState === 'STOPPED'\n                ? t('action.start')\n                : t('action.stop')\n            \"\n            :loading=\"connectionState === 'STARTING'\"\n            @click=\"toggleSSEConnection\"\n          />\n        </div>\n      </div>\n    </template>\n    <template #secondary>\n      <RealtimeLog\n        :title=\"t('sse.log')\"\n        :log=\"(log as LogEntryData[])\"\n        @delete=\"clearLogEntries()\"\n      />\n    </template>\n  </AppPaneLayout>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, onUnmounted, onMounted } from \"vue\"\nimport \"splitpanes/dist/splitpanes.css\"\nimport { debounce } from \"lodash-es\"\nimport {\n  SSEEndpoint$,\n  setSSEEndpoint,\n  SSEEventType$,\n  setSSEEventType,\n  SSESocket$,\n  setSSESocket,\n  SSELog$,\n  setSSELog,\n  addSSELogLine,\n} from \"~/newstore/SSESession\"\nimport { useToast } from \"@composables/toast\"\nimport { useI18n } from \"@composables/i18n\"\nimport {\n  useStream,\n  useStreamSubscriber,\n  useReadonlyStream,\n} from \"@composables/stream\"\nimport { SSEConnection } from \"@helpers/realtime/SSEConnection\"\nimport RegexWorker from \"@workers/regex?worker\"\nimport { LogEntryData } from \"~/components/realtime/Log.vue\"\n\nconst t = useI18n()\nconst toast = useToast()\nconst { subscribeToStream } = useStreamSubscriber()\n\nconst sse = useStream(SSESocket$, new SSEConnection(), setSSESocket)\nconst connectionState = useReadonlyStream(sse.value.connectionState$, \"STOPPED\")\nconst server = useStream(SSEEndpoint$, \"\", setSSEEndpoint)\nconst eventType = useStream(SSEEventType$, \"\", setSSEEventType)\nconst log = useStream(SSELog$, [], setSSELog)\n\nconst isUrlValid = ref(true)\n\nlet worker: Worker\n\nconst debouncer = debounce(function () {\n  worker.postMessage({ type: \"sse\", url: server.value })\n}, 1000)\n\nwatch(server, (url) => {\n  if (url) debouncer()\n})\n\nconst workerResponseHandler = ({\n  data,\n}: {\n  data: { url: string; result: boolean }\n}) => {\n  if (data.url === server.value) isUrlValid.value = data.result\n}\n\nonMounted(() => {\n  worker = new RegexWorker()\n  worker.addEventListener(\"message\", workerResponseHandler)\n\n  subscribeToStream(sse.value.event$, (event) => {\n    switch (event?.type) {\n      case \"STARTING\":\n        log.value = [\n          {\n            payload: `${t(\"state.connecting_to\", { name: server.value })}`,\n            source: \"info\",\n            color: \"var(--accent-color)\",\n            ts: undefined,\n          },\n        ]\n        break\n\n      case \"STARTED\":\n        log.value = [\n          {\n            payload: `${t(\"state.connected_to\", { name: server.value })}`,\n            source: \"info\",\n            color: \"var(--accent-color)\",\n            ts: Date.now(),\n          },\n        ]\n        toast.success(`${t(\"state.connected\")}`)\n        break\n\n      case \"MESSAGE_RECEIVED\":\n        addSSELogLine({\n          payload: event.message,\n          source: \"server\",\n          ts: event.time,\n        })\n        break\n\n      case \"ERROR\":\n        addSSELogLine({\n          payload: t(\"error.browser_support_sse\").toString(),\n          source: \"info\",\n          color: \"#ff5555\",\n          ts: event.time,\n        })\n        break\n\n      case \"STOPPED\":\n        addSSELogLine({\n          payload: t(\"state.disconnected_from\", {\n            name: server.value,\n          }).toString(),\n          source: \"disconnected\",\n          color: \"#ff5555\",\n          ts: event.time,\n        })\n        toast.error(`${t(\"state.disconnected\")}`)\n        break\n    }\n  })\n})\n\n// METHODS\n\nconst toggleSSEConnection = () => {\n  // If it is connecting:\n  if (connectionState.value === \"STOPPED\") {\n    return sse.value.start(server.value, eventType.value)\n  }\n  // Otherwise, it's disconnecting.\n  sse.value.stop()\n}\n\nonUnmounted(() => {\n  worker.terminate()\n})\nconst clearLogEntries = () => {\n  log.value = []\n}\n</script>\n"],"names":["useI18n","toast","useToast","subscribeToStream","useStreamSubscriber","sse","useStream","SSESocket$","SSEConnection","setSSESocket","connectionState","useReadonlyStream","server","SSEEndpoint$","setSSEEndpoint","eventType","SSEEventType$","setSSEEventType","log","SSELog$","setSSELog","isUrlValid","ref","worker","debouncer","debounce","watch","url","workerResponseHandler","data","onMounted","RegexWorker","event","addSSELogLine","toggleSSEConnection","onUnmounted","clearLogEntries"],"mappings":"q6BA4FA,MAAA,EAAAA,IACAC,EAAAC,IACA,CAAA,kBAAAC,GAAAC,IAEAC,EAAAC,EAAAC,EAAA,IAAAC,EAAAC,CAAA,EACAC,EAAAC,EAAAN,EAAA,MAAA,iBAAA,SAAA,EACAO,EAAAN,EAAAO,EAAA,GAAAC,CAAA,EACAC,EAAAT,EAAAU,GAAA,GAAAC,CAAA,EACAC,EAAAZ,EAAAa,GAAA,CAAA,EAAAC,EAAA,EAEAC,EAAAC,EAAA,EAAA,EAEA,IAAAC,EAEA,MAAAC,EAAAC,EAAA,UAAA,CACEF,EAAA,YAAA,CAAA,KAAA,MAAA,IAAAX,EAAA,KAAA,CAAA,CAAqD,EAAA,GAAA,EAGvDc,EAAAd,EAAAe,GAAA,CACEA,GAASH,GAAU,CAAA,EAGrB,MAAAI,EAAA,CAAA,CAA+B,KAAAC,CAC7B,IAAA,CAIAA,EAAA,MAAAjB,EAAA,QAA+BS,EAAA,MAAAQ,EAAA,OAAwB,EAGzDC,EAAA,IAAA,CACEP,EAAA,IAAAQ,EACAR,EAAA,iBAAA,UAAAK,CAAA,EAEAzB,EAAAE,EAAA,MAAA,OAAA2B,GAAA,CACE,OAAAA,GAAA,YAAAA,EAAA,KAAA,CAAqB,IAAA,WAEjBd,EAAA,MAAA,CAAY,CACV,QAAA,GAAA,EAAA,sBAAA,CAAA,KAAAN,EAAA,KAAA,CAAA,IAC6D,OAAA,OACnD,MAAA,sBACD,GAAA,MACH,CACN,EAEF,MAAA,IAAA,UAGAM,EAAA,MAAA,CAAY,CACV,QAAA,GAAA,EAAA,qBAAA,CAAA,KAAAN,EAAA,KAAA,CAAA,IAC4D,OAAA,OAClD,MAAA,sBACD,GAAA,KAAA,IAAA,CACM,CACf,EAEFX,EAAA,QAAA,GAAA,EAAA,iBAAA,GAAA,EACA,MAAA,IAAA,mBAGAgC,EAAA,CAAc,QAAAD,EAAA,QACG,OAAA,SACP,GAAAA,EAAA,IACE,CAAA,EAEZ,MAAA,IAAA,QAGAC,EAAA,CAAc,QAAA,EAAA,2BAAA,EAAA,SAAA,EACqC,OAAA,OACzC,MAAA,UACD,GAAAD,EAAA,IACG,CAAA,EAEZ,MAAA,IAAA,UAGAC,EAAA,CAAc,QAAA,EAAA,0BAAA,CAC0B,KAAArB,EAAA,KACvB,CAAA,EAAA,SAAA,EACH,OAAA,eACJ,MAAA,UACD,GAAAoB,EAAA,IACG,CAAA,EAEZ/B,EAAA,MAAA,GAAA,EAAA,oBAAA,GAAA,EACA,KAAA,CACJ,CAAA,CACD,CAAA,EAKH,MAAAiC,EAAA,IAAA,CAEE,GAAAxB,EAAA,QAAA,UACE,OAAAL,EAAA,MAAA,MAAAO,EAAA,MAAAG,EAAA,KAAA,EAGFV,EAAA,MAAA,MAAe,EAGjB8B,EAAA,IAAA,CACEZ,EAAA,UAAA,CAAiB,CAAA,EAEnB,MAAAa,EAAA,IAAA,CACElB,EAAA,MAAA,EAAa"}