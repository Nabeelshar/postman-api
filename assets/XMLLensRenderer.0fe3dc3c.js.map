{"version":3,"file":"XMLLensRenderer.0fe3dc3c.js","sources":["../../../hoppscotch-common/src/components/lenses/renderers/XMLLensRenderer.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col flex-1\">\n    <div\n      class=\"sticky z-10 flex items-center justify-between flex-shrink-0 pl-4 overflow-x-auto border-b bg-primary border-dividerLight top-lowerSecondaryStickyFold\"\n    >\n      <label class=\"font-semibold truncate text-secondaryLight\">\n        {{ t(\"response.body\") }}\n      </label>\n      <div class=\"flex\">\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('state.linewrap')\"\n          :class=\"{ '!text-accent': linewrapEnabled }\"\n          :icon=\"IconWrapText\"\n          @click.prevent=\"linewrapEnabled = !linewrapEnabled\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip', allowHTML: true }\"\n          :title=\"`${t(\n            'action.download_file'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>J</kbd>`\"\n          :icon=\"downloadIcon\"\n          @click=\"downloadResponse\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip', allowHTML: true }\"\n          :title=\"`${t(\n            'action.copy'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>.</kbd>`\"\n          :icon=\"copyIcon\"\n          @click=\"copyResponse\"\n        />\n      </div>\n    </div>\n    <div ref=\"xmlResponse\" class=\"flex flex-col flex-1\"></div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport IconWrapText from \"~icons/lucide/wrap-text\"\nimport { computed, ref, reactive } from \"vue\"\nimport { flow, pipe } from \"fp-ts/function\"\nimport * as S from \"fp-ts/string\"\nimport * as RNEA from \"fp-ts/ReadonlyNonEmptyArray\"\nimport * as A from \"fp-ts/Array\"\nimport * as O from \"fp-ts/Option\"\nimport { useCodemirror } from \"@composables/codemirror\"\nimport type { HoppRESTResponse } from \"~/helpers/types/HoppRESTResponse\"\nimport { useI18n } from \"@composables/i18n\"\nimport {\n  useResponseBody,\n  useDownloadResponse,\n  useCopyResponse,\n} from \"@composables/lens-actions\"\nimport { defineActionHandler } from \"~/helpers/actions\"\nimport { getPlatformSpecialKey as getSpecialKey } from \"~/helpers/platformutils\"\nimport { objFieldMatches } from \"~/helpers/functional/object\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  response: HoppRESTResponse & { type: \"success\" | \"fail\" }\n}>()\n\nconst { responseBodyText } = useResponseBody(props.response)\n\nconst responseType = computed(() =>\n  pipe(\n    props.response,\n    O.fromPredicate(objFieldMatches(\"type\", [\"fail\", \"success\"] as const)),\n    O.chain(\n      // Try getting content-type\n      flow(\n        (res) => res.headers,\n        A.findFirst((h) => h.key.toLowerCase() === \"content-type\"),\n        O.map(flow((h) => h.value, S.split(\";\"), RNEA.head, S.toLowerCase))\n      )\n    ),\n    O.getOrElse(() => \"text/plain\")\n  )\n)\n\nconst { downloadIcon, downloadResponse } = useDownloadResponse(\n  responseType.value,\n  responseBodyText\n)\n\nconst { copyIcon, copyResponse } = useCopyResponse(responseBodyText)\n\nconst xmlResponse = ref<any | null>(null)\nconst linewrapEnabled = ref(true)\n\nuseCodemirror(\n  xmlResponse,\n  responseBodyText,\n  reactive({\n    extendedEditorConfig: {\n      mode: \"application/xml\",\n      readOnly: true,\n      lineWrapping: linewrapEnabled,\n    },\n    linter: null,\n    completer: null,\n    environmentHighlights: true,\n  })\n)\n\ndefineActionHandler(\"response.file.download\", () => downloadResponse())\ndefineActionHandler(\"response.copy\", () => copyResponse())\n</script>\n"],"names":["t","useI18n","responseBodyText","useResponseBody","props","responseType","computed","pipe","O.fromPredicate","objFieldMatches","O.chain","flow","res","A.findFirst","h","O.map","S.split","RNEA.head","S.toLowerCase","O.getOrElse","downloadIcon","downloadResponse","useDownloadResponse","copyIcon","copyResponse","useCopyResponse","xmlResponse","ref","linewrapEnabled","useCodemirror","reactive","defineActionHandler"],"mappings":"ipCA6DAA,EAAAC,IAMA,CAAA,iBAAAC,CAAA,EAAAC,EAAAC,EAAA,QAAA,EAEAC,EAAAC,EAAqB,IAAAC,EACnBH,EAAA,SACQI,EAAAC,EAAA,OAAA,CAAA,OAAA,SAAA,CAAA,CAAA,EAC+DC,EACnEC,EAEAC,GAAAA,EAAA,QACeC,EAAAC,GAAAA,EAAA,IAAA,YAAA,IAAA,cAAA,EAC4CC,EAAAJ,EAAAG,GAAAA,EAAA,MAAAE,EAAA,GAAA,EAAAC,EAAAC,CAAA,CAAA,CACS,CACpE,EACFC,EAAA,IAAA,YAAA,CAC8B,CAChC,EAGF,CAAA,aAAAC,EAAA,iBAAAC,CAAA,EAAAC,EAA2CjB,EAAA,MAC5BH,CACb,EAGF,CAAA,SAAAqB,EAAA,aAAAC,CAAA,EAAAC,EAAAvB,CAAA,EAEAwB,EAAAC,EAAA,IAAA,EACAC,EAAAD,EAAA,EAAA,EAEA,OAAAE,EAAAH,EACExB,EACA4B,EAAA,CACS,qBAAA,CACe,KAAA,kBACd,SAAA,GACI,aAAAF,CACI,EAChB,OAAA,KACQ,UAAA,KACG,sBAAA,EACY,CAAA,CACxB,EAGHG,EAAA,yBAAA,IAAAV,EAAA,CAAA,EACAU,EAAA,gBAAA,IAAAP,EAAA,CAAA"}